= 過⼩⾒積もりで炎上するプロジェクトから得られた学びと実践

このすみと申します。本書(見積もり合同誌)は、技術書典5で私が頒布したエンジニアアンチパターン@<fn>{エンジニアアンチパターン}と、おやかた.am@<fn>{おやかた.am}がきっかけで誕生しました。

//footnote[エンジニアアンチパターン][@<href>{https://booth.pm/ja/items/1025135}]
//footnote[おやかた.am][@<href>{https://anchor.fm/kane4}]

エンジニアアンチパターンには、リーダーとして経験した「過⼩⾒積もりで炎上するプロジェクト」という章があります。概要は以下の通りです。

== 概要：過⼩⾒積もりで炎上するプロジェクト

私の人生において最大の炎上が、スマートフォンアプリの開発案件です。当時の私の役割は、iPhoneアプリの開発リーダーでした。時代背景で言うと、Swiftが正式リリースされた頃の話になります。 

このスマートフォンアプリの開発プロジェクトは、当初の見積もりである3ヶ月半を大幅に超過し、途中でメンバーを増員したにも関わらず、最終的には半年近くかかっています。

結局、この年の私は、大晦日や年末年始を会社で過ごすことになります。身体は疲労困憊で、完全に失敗プロジェクトの典型例でした。

=== もう炎上は懲り懲りです

失敗の分析はエンジニアアンチパターンに書いてありますので、本誌をお読みいただければと思います。ただ、見積もりの失敗による炎上を経験した結果、私も色々と工夫を考えました。

いくつか実験をしてみたり、実践したことがあります。今回は、そういった取り組みをいくつか紹介していきます。

== どこまで仕様を削減することができるのか？

見積もりには、必ず見積もる対象があります。多くの場合は、タスク・機能・プロジェクトなどです。見積もりをしていて感じることは、プロジェクトの規模が大きくなるほど、見積もりは飛躍的に難しくなるということです。

みずほ銀行のシステム移行を正確に見積もれる人はいないでしょうし、システム規模が大きくなるほど、見積もりのブレ幅が大きくなります。

そこで、私がまずやることは、見積もりではなく仕様の削減です。まずは、対戦相手を弱体化させることから始めます。

 * どうしても削れないもの、それこそが仕様である



