= タスク見積もり

仕事をする時、社会人が最初に覚えなければいけないことは、おそらく自分のタスクを見積もる術でしょう。組織でプレイヤーとして動く、あるいは独立してフリーランスになる場合でも、自分のタスクを見積もる術を知らないと、大変なことになります。

そこでまずはタスク見積もりの基本をおさらいしてみましょう。

== タスクとは？

まず何かしらの命題があります。新しいサービスを立ち上げて収益を得る、社内システムの改善をする、顧客にとって人件費がかかっている作業をシステム化するためのシステム開発などさまざまです。フリーランスでいえば、イラストを描く、小説を書く、ウェブサイトを作成する、環境整備と指導をする、技術記事を書くとか色々あります。

だいたいの場合において命題というのは、大きな単位です。人間は大きな単位で認識したまま仕事をすることはできません。その大きな単位を現実的な作業単位に分解する必要があります。

分解するときには色々な粒度で分解できます。たとえばアジャイル界隈でよく使われるのが「ストーリー」という単位です。「ユーザーがログインする」は1つのストーリーです。ただし、ストーリーそのままでも作業単位としてはまだ大きいのです。

他のプロジェクト管理の方法ではまた違った粒度で管理しているでしょう。これは会社、チームなどによって色々な流儀があります。

しかし、どういうところでも必ず必要になるのがタスクという単位です。まずは大きな単位をタスクに分解することを身につける必要があります。

=== タスク単位に分割する理由

いくつも理由はあります。

==== 報告・連絡・相談

まず上司やチームメンバーに報告するためです。メンバーが今何をやっていて、どれくらいで終わって次のタスクに取りかかれるかというのは、上司なりチームメンバーなりにとって、把握しておきたいことです。

タスクにまだ慣れてない人であれば、タスクの状況というのは、センサーになります。うまくいってるのか？それともうまくいってないのか？早めに状況を知り、必要であれば助けをだすことがチームにとって必要です。また、当人としても、できる限り早めに状況を伝えるべきです。早めの報告、早めの相談、早めの連絡が大切です。

==== タスクの見落としを防ぐため

大きな単位、プロジェクトやストーリーなどを実現するときに必要な作業のすべては、実際にタスクに分割することで見えます。場合によっては、タスク分割しても全貌がはっきりしないケースも普通にあります。

これをサボると必要な工程を見落とすことが多々あります。実は隣のチームと連携しなければいけなくて、それには2週間かかるのに、リリースは1週間後みたいなホラーを体験したくはないですよね？

細かい単位に落とし込むと、どれを先にやらないと後が詰まる、いわゆるボトルネックなども見えてきます。

==== 考えやすい単位にすることで作業しやすくする

タスクに分解するのを何回もこなしてくると、大体パターンが見えてくるでしょう。パターンが見えてくれば、以前やったタスクと同じタスクや似たタスクがあるでしょう。それらは今後も出てくるのではないでしょうか？

手順書を作る、コツをまとめておく、スクリプトを作成して自動化するなど、作業を楽にするための術を身につけないと、いつまでも面倒な繰り返しを延々続けることになります。

== どうタスク分割をするのか？

上司やチームメンバーが把握したい粒度というのはあります。まずはその粒度で分割してみましょう。チームメンバーがどういう粒度にしているかが参考になるはずです。

ただし、その粒度は不適切な可能性もあります。細かすぎる場合は報告とかのオーバーヘッドが増えます。大雑把すぎると、長いタスクになって作業しづらいもの@<fn>{bigtask}になります。

//footnote[bigtask][筆者の感覚として、タスクは30分〜2時間程度で終わるべきだと思っています。]

チームとしてあまり細かいタスクには興味が無いというケースももちろんあるでしょう。その場合、タスクをさらにサブタスクに分割するという方法もあります。サブタスクは共有してもいいですし、自分だけで保持してもいいでしょう。

どうやってもやりにくい、効率が悪いとか感じるのであれば上司なりに相談しましょう@<fn>{angry-boss}。タスク管理についてアドバイスをもらえるかもしれませんし、粒度に関して見直しを考える可能性もあります。
//footnote[angry-boss][相談すると怒られる、出来そうにないという場合は、会社内部で異動できそうなら異動を考える、そもそも会社全体がそういう風潮であれば、ワンストップ転職本を読むべきかもしれませんね。]

=== タスクの定義に必要なもの

前提条件（要件や、あれば締め切り）がもちろん必須です。前提をすっ飛ばすと、作業をしてもちゃぶ台をひっくり返されたり、信用を失ったり、仕事を失ったりします。

何をすればタスクが完了なのか、ゴールを決めることも大切です。ゴールなきタスクは延々と終わらなかったり、不完全になったり色々します。場合によっては、ゴールについて誰かと相談する必要があるときもあるでしょう。

順調ではないという判定基準もあるとよいでしょう。基準はいろいろあります。実際にコードを書いてみて動かしたけど実行速度の問題がある、15分くらい手が止まってしまった、2時間で機能の実装が完了しなかったなどです。その判定に引っかかった場合は、やり方を間違えてるか、必要な何かが欠けてるか、そもそもタスクが間違ってるかなどを考え直すべきです。

本書のテーマである見積もりももちろんしましょう。最初は大雑把でも慣れてくれば少しずつ精度が上がるはずです。

具体的なアクションを書き出すというのも有効なテクニックです。「VSCodeを立ち上げて、○○のファイルを開く」というようなアクションはタスクを開始する時にとても役に立ちます。信じられないですか？人間の脳は実際にアクションを起こさないと「やる気」を分泌してくれません。実際に実行できるアクションを書き出し、それを実行することで、やる気エンジンが回り出すのです。

他にも、タスク定義の時点で、所感を書いておくというのもよいでしょう。これはあとあとになって響いてきます。

====[column] 完了

　手動でテストする行程が残ってるけど、コードを実装したという段階では、タスクは完了ですか？違いますよね？

　完了とはタスクとして定義したものをすべてこなすことです。正確にいうと前提条件をすべて満たすことです。

　手動でテストしてあぶり出せる範囲のバグを取ることというのは、前提条件として忘れていたのかもしれません。

　いつまでも完了しないタスクがあると、人間の脳は気がかりなこととして認識したうえで、脳の領域の一部を占拠しつづけます。それらが増えるとメモリスワップや、CPU負荷があがりすぎたりしてしまうのです。そのため、タスクは完了をすべきです。

　それでは、タスクを完了するためにはどうすればいいでしょうか？

　根性で終わらせるというのは、場合によっては有効ですが、常用するとブラック労働、精神を病むのコンボまっしぐらです。

　隠れた要件をあぶり出す、ゴールを見直す、あるいは、そもそもタスク分割自体に誤りが無いか考えるというのはいい考えです。

　根性で間違ったタスクに合わせるのではなく、作業しやすいように正しくタスク定義をするのです。

　ここで必要なことはそのタスク定義が正しかったかどうかの振り返りです。振り返りの数だけ、タスク定義は上達します。

====[/column]

== あとですること

タスクをやったら、やりっぱなしというわけにはいきません。

上司に報告する、チケットを完了にするなど、何かしら上司からの指示やチームの取り決めがあるでしょう。他のひとはチーム内のどのタスクが実際に完了したのか関心を持っているのです。

他にもやるべきことがあります。

見積もった時間と実際にかかった時間を比べてみましょう。これをしなければ見積もりの精度は上がりません。時間は雑なものではなく、なるべくなら時計を見ながら実時間を出すべきです。

そして、コラムにも書いたとおり、タスク定義が正しかったか振り返りをしましょう。所感を記しておくとなお効果的です。タスク定義時の所感と、完了時の所感はどう違うのか？

この振り返りは提出が必須なら提出しましょう。そうじゃない場合は任意です。手元のテキストとして保存するだけでもいいです。評価制度のある会社ならば、必ず手元に保存しておきましょう。評価のための振り返りのとき必須になるからです。

=== どういうタイミングでする？

報告やチケットの操作だけしておいて、細かいことは後回しにするという手はあります。

作業時間にもよりますが、なるべくなら完了直後、覚えてるうちに書くべきです。脳を整理して休めて、次のタスクに備える効果もあります。

短いタスクであれば、いくつかまとめて、振り返りをするのもありでしょう。自分なりに効率や脳の負荷を見ながら、どれくらいの時間であればまとめるか？という基準を探しましょう。
