= 温かみのある見積もりをする方法

== はじめに
エンジニアの数も少なく、事業部もエンジニアの仕事に精通していない小さな会社のお話
ドライに見積もるだけではうまくいかないこともあります。
暖かみのある見積もりをするための日頃の心構えについて述べていきます。

筆者は、10畳程度の小さなオフィスで働いている。
少し歩けば、会社の人全員と話をすることが可能な規模感だ
そんな会社で社内システムや会員用webサイトを開発・運用・保守をしている
そんな私に課せられている仕事は、社内で上がった要望をベースにシステムの改修を行うことである。
社内で上がった要望は、決して細かい仕様まで決められているわけではなく、大雑把な要望である。

しかし、暖かみのある見積もりをするためには、言われたことのに対して愚直に見積もることなのだろうか？
否、見積もりをする前にもっとお互いのことを理解して、温かみのある見積もりをする。

== 隣のあの人は何の業務をしているの？
隣の人から、システムの回収依頼が入った。内容は社内のシステムの改修案件らしい
私は、そのシステムを使った業務内容を今まで理解していたのだろうか？
私には、そのシステムの改修が何をどのように改善するものなのかを理解することができていなかった。

=== 業務フローを知る
社内システムというのは、業務フローに強く結びついているものである
業務フローが理解できていない場合は何を作るべきなのかがわからないということがある。
要望を出している人も整理ができていない業務フローがあったりするので、必ず整理をする必要がある。
なぜ、そのような業務フローになっているのか？他に必要な機能はないのか？逆に不要な機能はないのか？ということを聞き始めるのである。


=== 業務内容で困っているポイントを知る
改修案件ということは、少なくとも現状のシステムでは困っていることがあるはずである。
どのようなことに困っているのかを詳しくヒアリングしましょう。
さらに、業務フローを整理していく中で、他にも関連して問題だと思っていることはないか？ということを確かめましょう。
実は、それも困っていました！そんなはなしも聞けるかもしれません。
このポイントを知らないまま見積もりをして、実装を開始すると
「実は個々の部分も修正したくて…」なんて話が出てくるかもしれません。
そのようなことが起きてしまうと、せっかく行った見積もりがズレてしまうという話になると思います。


=== 自分がやったら何ができるのかを考える
その業務をまずは自分がやるとしたらどうなるだろうかを考える（自分事にしてみる）
こういうところが自動化できると楽かなぁ、この表示は邪魔かなぁということを考える。
それをすることで、開発をするもののイメージを自分の中に作ります。
そうすることで、見積もりの段階で、この機能はこれでも代替できそうだなぁとか
この機能はもう少ししっかりと作り込んだほうが良いであろうなぁ
ということがわかるようになってきます。
見積もりをすることが目的なのではなく、業務改善を適切な工数で最適なシステムで成し遂げるということ大切だからです。


=== その人がやるなら何が必要か考える
自分事にしてみるという話をしていましたが、最終的には利用をする人の事を考えて実装をする必要があります。
その人が普段行っていること、使っているツール、得手不得手（物事を詳細に確認するのが苦手なので一覧で網羅的に確認できるようにするとか）
といったところを意識する必要があります。
社内のメンバーといえどもユーザーファーストの考え方を持って何を作るのかを意識すると、見積もりをしたときの妥当性が高まります。

== 見積もりの妥当性を誰にでもわかるように示す
私の用に、小さな会社で働いている場合、エンジニアのチームも大きなものにはなりません。
なかなか、相見積もり（一人の見積もりだけではなく複数人で見積もりをして比較検討すること）をすることができません。
その際に、必要となってくることが
エンジニアが出した見積もりが依頼者にとって妥当な見積もりであるということを納得してもらう必要があります。
これは、極端な話になりますが、すべての案件を2倍の時間を見積もってしまい、空きの時間ができてしまうことや、半分の時間で見積もってしまい残業などをする必要があったりすることがあります。
自分で決められるからこそ責任を持って妥当性を示す必要があると思います。

=== なぜ、時間がかかるのかを説明する？
基本的には工数と言うものは少なければ少ないほどよいはずです。
なんで、見積もりの説明については基本的に *なぜ時間がかかるのか？*を説明する必要があります。
極稀に、ものすごく簡単に実現することができる機能があります。その場合も *なぜそんなに時間がかからずできるのか？*ということも説明できるようにしておくと良いと思います。

=== 他の機能開発との難易度の差は？
エンジニアの目線で見ていると、各機能の実装に対して、どの程度の工数が必要なのかということの妥当性については自身では理解していると思います・
しかし、発注者側から見ると出てきた工数の妥当性を判断する方法がありません。
その場合は、過去に開発した結果と比べてどの程度難易度が異なるのかを説明しましょう。

=== 要件を理解する
そもそも要件が理解できていないのであれば見積もり自体ができません。
要件が固まっていないところがあったら必ず要件を固めましょう。
なぜ要件を固めるのか？固めないと見積もりが冷たくなってしまうからです。
温かい見積もりのためには要件を固めることに妥協をしてはいけません。

== 見積もりから外れるときは必ず説明する
なぜ、見積もりから外れそうなのかをしっかりと説明するようにしましょう。
見積もりから外れることは有りえます。その要因は色々と考えられると思います。

=== 要因は何か？
要因は何かをしっかりと分析をして、説明をできるようにしましょう。
エンジニアではない人がわからないといって説明をしないというのは不親切です。
見積もりから外れる原因は様々あると思います。
・使用しようとしていた技術が想定の動作をしなかった
・人員の増減などにより、見積もり時と実装者の条件が変更される

=== 現実的に解決するにはどうするか？
見積もりから遅れてしまうときの要因として、技術的な課題が問題がある場合は、それをどのように解決をするのか考えないといけません
スキルや時間によっては機能の変更を余儀なくされることもあると思います。

=== 期日を伸ばすか？何かを削るか？
見積もりが外れたときに必ず話すこととしては、期日を伸ばすか？何かを削るか？ということです。
どんなときでも期日を伸ばすことができるとは限らないと思います。
そういう場合は、機能を削る必要があるかもしれません。
業務フローを知っていると削るべきところもわかりやすく示すことができるので、一部の機能部分まで

== まとめ
見積もりとは開発の最初の段階における信頼形成の大事な事柄です
信頼関係を築くことでより良い見積もりをすることができると思います