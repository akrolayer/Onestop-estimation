= 2点見積もりと振り返りのススメ

== 2点見積もりとは?
みなさんが見積もりをするとき、多くの方がこう考えるのではないでしょうか?

 * だいたい2日あればできるな、マージンいれて3日にしとこう。
 * うーん、1時間でできそうだけど、サボりたいから6時間と言っておこう。

つまり見積もった数字を”1点”で表現します。

2点見積では、こう考えます。

 * 最速だと1.5日、どんなに遅れても4日あれば終わるので、1.5日～4日だな。
 * 1時間で終わると思う、問題があっても聞けば行けそうだからハマっても3時間だな(1?3時間)

このように必ず”2点”で表現します。

この章では以下について解説します。

 * 従来の1点による見積もり(以下1点見積もり)のデメリット
 * 2点見積もりによるメリット
 * 振り返りの利点とそのやり方

「なんかい見積もりしても実態に合わないし、頑張る意味ないから適当に多めに出しとけばいいや」

もしこんな方がいたら、ぜひこの章を読んでください。100%正確な見積もりはできませんが、繰り返すたびに徐々に実態に合ってくる見積もり手法を知ることができます。

なお、この章では個々のケースに対する具体的な見積もりのやり方は説明しません。例えばRuby on Railsでログイン画面を作るのと、iOSのSwiftでログイン画面を作る場合の見積もり結果は大きく異なります。またそれを行う担当者のスキルレベルや過去のコード資産の有無によっても変わってきてしまいます。そのため、あくまで2点見積もりという手法に関してのみ説明していきます。

== 1点見積もりのデメリット

まず多くの方が使われているだろう1点見積もりのデメリットを説明していきます。1点見積もりには以下のデメリットがあります。

 * 定義の曖昧さ

 * パーキンソンの法則

 * 学生症候群

 * 喉元を過ぎれば熱さを忘れる



==== 定義の曖昧さ

1点見積もりではその見積もり結果の定義が曖昧であるため、同じ3日でも人によって解釈が異なってしまいます。

ある人は、最速でやって3日と考えるでしょう。別の人は、余裕をみて3日と考えるかもしれません。あるいは、よくわからないから適当に3日と考えるかもしれません。

これでは以下のような問題が発生します。

 * せっかく出してもらった見積もりを一覧化しても精度が荒い物になってしまう

 * 進捗管理しようにも消化日数の意味が曖昧になり数値からリスクを読み取るのが困難になる

==== パーキンソンの法則

「仕事は、その遂行のために利用できる時間をすべて埋めるように拡大する」

例えば5日かかる仕事が3日で終わった場合、残り2日をその仕事の完成度を高める時間に使ってしまう、あるいは早く終わったので報告せずにサボってしまう可能性が出てきます。
これでは以下の問題が発生してしまいます。

 *  無意味に時間を消費してしまいバッファの意味がなくなる

==== 学生症候群

皆さんは夏休みの宿題を期日までに終わらせていましたか?余裕があるとなるとギリギリまで着手しない方も多いのではないでしょうか?そして、新学期が始まっても日記を書いていたりとか…。
同じことが仕事の見積もりでも起こります。

例えばある人が出した見積もりが5日だとします。このうち2日はマージンだとすると、人によっては最初の2日間に作業しない可能性があります。

そして残り3日でやり始めますが、だいたい見積もりは外れることが多いので当初の見積もりを超過してしまいます。

このように以下のような問題が起こる可能性があります。

 * マージンの使い方を誤り作業着手が遅れ結果的に作業遅延が発生する



==== 喉元を過ぎれば熱さを忘れる

もし、見積もりした日数を超過するとわかった場合、モチベーションが下がってしまうことがあります。

「どうせ遅れるんだし2日も3日も変わらないから、3日遅れるって言っとこうっと」

このように最低限の遅れで済んだはずが、間に合わせようという意識がなくなることで、傷口が広がってしまうことがあります。また間に合わなかったという意識から本人のモチベーションがダウンする場合があります。

 * 見積もり超過の判明によりモチベーションがダウンし作業効率がさらに下がる場合がある

というわけで1点見積もりには以下のような問題がありました。



 * 定義の曖昧さ
 ** せっかく出してもらった見積もりを一覧化しても精度が荒い物になってしまう
 ** 進捗管理しようにも消化日数の意味が曖昧になり数値からリスクを読み取るのが困難になる
 * パーキンソンの法則
 ** 作業完了後に無意味に時間を消費してしまいバッファの意味がなくなる
 * 学生症候群
 ** マージンの使い方を誤り作業着手が遅れ結果的に作業遅延が発生する
 * 喉元を過ぎれば熱さを忘れる
 * 見積もり超過の判明によりモチベーションがダウンし作業効率がさらに下がる場合がある

2点見積もりではこれらの問題を解決することができます!

== 2点見積もりについて

2点見積もりでは以下の2点で見積もりをします。
 * 最小見積もり

  達成可能か不可能かギリギリの挑戦的な日数。
  達成確率は20%(10個あれば2個は達成するくらいの難易度)

 * 最大見積もり

  これを超えたら恥ずかしい日数。
  達成確率は80%(10個あれば8個は達成するくらいの難易度

そしてさらにここにバッファという考え方を定義します。

　* バッファ

  最大見積もり - 最小見積もり = バッファ
  最小見積もりで達成できたら0%、
  最大見積もりで達成できたら100%とします。

これらの定義により1点見積もりの問題を解決します。

 * 定義の曖昧さ

  最小見積もりと最大見積もりと定義したことにより、定義の曖昧さは完全に無くなります。そのため、集めた見積もりの精度が上がりますし、数値から進捗に対する危機感が正確にわかります。

 * パーキンソンの法則

  見積もりの精度がタスク毎に表現されるため,バッファはバッファとして使用されるようになります。 (作業時間として勝手に使用されない)
  そのため、タスクを抱え込むことなく、さっさと次のタスクを始める喜びを感じます。

 * 学生症候群

  最小見積もりを達成しようと努力するため、作業開始直後から全力で作業できます。

 * 喉元を過ぎれば熱さを忘れる

  最小見積もりを超えても、「これを超えたら恥ずかしい」最大見積もりという最小防衛ラインがあります。そこだけは超えないようにモチベーションを高く維持できます。

こういった効果により2点見積もりの使用をお勧めします。

== 振り返りのススメ

単純に2点見積もりを使うだけではその効果を最大限に発揮できません。この見積もり方式は振り返りをしてこそ、真価を発揮すると思っています。
そのため、この章では2点見積もり結果の振り返り方を説明していきます。

=== 振り返りのメリット

まずは振り返りの具体的なやり方の前に、そのメリットを説明していきます。

==== 補正による精度向上

  振り返りをすることで、見積もりがズレた場合でも次回の見積もりにそれを活かすことかできます。また、1点見積もりと違い2点見積もりの場合はより細かく分析可能です。詳細は後述しますが、1点見積もりでは見積もりより早いか遅いかくらいしか分析できません。ですが、2点見積もりではさらに細かく分析を行い見積もり精度の向上を図る事が可能なのです。

==== 土壇場の裏付け

  「本当にその工数でできるの?」
  
見積もりをしていて、こんなことを言われたことないでしょうか?そんなときこれまでは明確な根拠もない今までの経験で乗り切ってきたと思います。ですが、2点見積もりと振り返りを続けることで、こんな質問にもこう答えられるようになります。

  「この半年間の実績を振り返ると見積もりの的中率は80%以上です。ご心配なら少しマージンを入れますが、いかが致しますか?」

  「過去に類似した見積もり結果を確認すると当時は見積もりを超過していたので、今回はその反省を踏まえた見積もりになっています。」

  どうでしょうか?たんに「経験があるから大丈夫です」と答えるより説得力がありませんか?

==== PDCAサイクルを回せる

見積もりをする(Plan)

タスクをこなして実績を取る(Do)

振り返る(Check)

次の見積もりに結果を活かす(Action)

このように振り返りによって、見積もり精度を向上させるPDCAを回すことができます。1点見積もりでも可能ですが、前述した補正のしやすさを考えるとCとAがやりやすい2点見積もりのほうが向いていると言えるでしょう。

そしてやりやすさは継続の大きな助けになります。誰だって面倒なことを繰り返したくはありませんよね。

==== 自信と信頼貯金

これまでのメリットにより見積もりに自信が出てきます。つまり迷うこと、悩むことが少なくなります。人間は決めることに多量の労力を使う生き物だそうです。見積もりは判断と決断の連続なので、これを自信を持って(迷わず悩まず)行うことができれば、本来労力をかけるべきタスクの実行に集中することができます。また、見積もりの正しさはあなたの信頼貯金として蓄積されていきます。

 繰り返しますが常に100%正しい見積もりなんてあり得ません。2点見積もりでも実績とズレることは当然あります。ですが2点見積もりとその実績、そして振り返りの結果は、それでもあなたが信頼してもらえる材料となることでしょう。

== 見積もり内容と実績を記録する

振り返りをするためにはまず実績を記録しなければなりません。この章では実績のとり方について説明していきます。具体的には以下のような項目を残します。

 * タスク名
 * タスク種別
 * 最小見積もり
 * 最大見積もり
 * 実績
 * バッファ
 * バッファ消費率

前に説明した、最小、最大見積もりを除く項目をそれぞれ説明していきます。

==== タスク名

  タスク名はそのままタスクの名前です。

==== タスク種別

  タスク種別はそのタスクの発生種別になります。もともと計画されていたものなのか?計画後に新たに追加された少なのか?割り込みなのか?そういった事を記録しておくことで振り返り時に、見積もりと実績の乖離を分析する一助とします。

==== 実績

  実際にそのタスクにかかった時間を記載します。

==== バッファ

  バッファは「最大見積もり - 最小見積もり = バッファ」で計算します。

==== バッファ消費率

バッファ消費率は実績が最小見積もりを超えた割合となります。
  
例えば、最小見積もり=実績であれば0%(バッファ消費なし)となります。最大見積もり=実績であれば100%(すべてのバッファを消費した)となります。バッファ/2=実績であれば50%(バッファの半分を消費した)となります。

見積もりに対してこれらを逐一記録していきましょう。かなり面倒だし続けるのが億劫だと思いますが、振り返りによる効果を享受するには必要な作業です。以下のように工夫してやっていくようにしましょう。





=== 実績記録における工夫の例

==== 既存ツールと組み合わせる

    筆者は既存の工数管理ツールのメモ欄に、以下のようなフォーマットで記録していました。

      最小,最大,実績,メモ(見積もりとズレた理由や気づきなど所感)

    これを月に一回csv出力して、Googleスプレッドシートに記録していきました。

    筆者は手作業で行っていましたが、自動化すればさらに楽になるはずです。

==== 仕事にしてしまう(行う目標を作る)

    筆者は2点見積もりによる見積もり精度向上を、仕事の一環として会社に表明して行っていました。具体的にはMBOという目標管理制度の一環として、半年間の活動目標に挙げたのです。これによりダレることなく、アウトプットする目的を作って実績をつけ続けられました。

    読者の方でそんな制度は無いよー!という方もいらっしゃるかもしれません。ですが、チームに対して今季はこういうことをやる!という宣言でも良いのです。なんならインターネットに対して自分のブログなどで公開しても良いでしょう。もちろんこのときはタスク名など、公開してはマズイ情報は隠して公開しましょうね。

==== 忘れちゃう対策

    人間誰しも忘れてしまうもの。見積もりはしたけど実績をつけるのを忘れてしまった…。溜まっていた実績をつけようと思ったらかかった時間を忘れてしまった…。
    そうならないようにリマインドしましょう。

      付箋に書いてディスプレイに貼る(TODO管理)。

      見積もり仲間を作って声を掛け合う。

      SlackでBotにリマインドしてもらう。

    筆者はSlackでBotにリマインドしてもらうのをおすすめします。

    会社でSlackを使っていなくても、自分のワークスペースを作ってリマインドしてもらいましょう。メッセージの中にGoogleスプレッドシートなどの記録している対象のリンクをつけておけば楽ですね。

=== 振り返りのやりかた

それでは具体的に振り返りのやり方を説明していきます。まずは見積もり内容と実績を比べてみましょう。バッファの消費率を見ることで、改善すべきポイントが明らかになってきます。

==== 最小見積もり以下の実績

    早く終わったからOKとなりがちですが、問題があります。

    思い出してください、最小見積もりの定義は、達成可能か不可能かギリギリの挑戦的な日数」です。

    ギリギリなのに早まるということは無意識にマージンを取ってしまっていることになります。

    マージンはバッファとして詰むので最小はあくまでギリギリを攻めましょう。

==== 常に最小見積もりと同じ(あるいは近しい)

    こちらも問題があります。

    最小見積もりは「達成確率は20%」です。

    常にそれが達成できるということは手を抜いた最小見積もりになっている可能性があります。

    最小はあくまでギリギリに。

    最小見積もりは達成できないことが普通なのです。

    また自分のアウトプットを過小評価していると最小見積もりに近くなります。

    最小見積もりはもっと攻めた見積もりにしても大丈夫。

    次回の見積もりに反映していきましょう。

==== バッファの中央値と同じ(あるいは近しい)

    素晴らしい見積もりです!

    見積もりした通りの結果になっていると言えます。

    このときもただ◯を付けて終わりにするのではなく、

    見積もり時に気をつけた事や振り返って正しかったポイントをメモしておきましょう。

    それらの暗黙知が形式知となってあなたを、チームを、プロダクトを救っていくでしょう。


    もしそれらがアウトプットできない場合、当てずっぽうの見積もりになっている可能性があります。もう一度自分の見積もり内容を振り返ってみましょう。

==== 常に最大見積もりと同じ(あるいは近しい)

    毎回「これを超えたら恥ずかしい日数」に近づくということは、

    なにか見積もりをする際に考慮が抜けてしまっている可能性があります。

    タスクの消化中に「あ!あれもやらなきゃ!」となっていことはありませんか?

    次回はそれを考慮した見積もりにしていきましょう。

  
    または実績をつける際に休憩や割り込みも含んでいませんか?見積もりのときに休憩や割り込みを入れないように、実績にもこれらは含みません。見積もりと実績は同じ定義で取らないと意味がありません。一度確認してみましょう。

    それでも最大に近いという場合、見積もりに余裕がなさすぎるのかもしれません。つまり自分のアウトプットを過大評価している可能性があります。実態に合わせて見積もりを補正していきましょう。

==== 最大見積もりを超過した

    「これを超えたら恥ずかしい日数」ですので存分に恥ずかしがりましょう。

    その次は落ち着いて振り返りましょう。

    なにか大きな見落としがあったのではないでしょうか?

    例えば、使えると思っていたライブラリが使えなかった。

    コピペで使い回すコードが使い回せなかった。

    書けると思ったSQLの性能が要件を満たせず書き直すハメになった。

  

    これらはすべて見積もりに不確定要素を含んでしまったがために起こります。

    不確定な部分は調査タスクとして別タスクに切り出しましょう。

    そうすることで、問題を分割し個々の見積もり精度を上げることができます。

    また不確定な部分は得意な人に切り出すことができます。

    見積もりが上手くいかない部分は得意な人にまかせてしまうのも手です。

    そして後でその人に知見を分けてもらうと良いでしょう。

  見積もりはズレるものなので最大見積もりを超過しても必要以上に気にすることはありません。

  ですが、振り返りをしなければ次に繋がりません。

  一致してもズレてしまっても振り返りを継続していきましょう。

=== 定期的に振り返る
  振り返りは定期的に行いましょう。
  思いついたときにやっても次に活かす機会が少なくなりますし、
  効果が見えづらくなるのでモチベーションが維持できません。


  可能ならタスク毎に振り返りをしたいですが、
  粒度によっては難しくなります。
  そのため、1日ごとに振り返るのが良いでしょう。


  1週間や1ヶ月だと期間が長すぎて改善する機会が少なくなってしまいますし、
  振り返る対象が多すぎて大変になってしまいます。
  大変なことは続きませんよね?
  なるべく楽で自分にあった方法を考えていきましょう。


==== 振り返りは仕組みに組み込むと楽
  定期的に振り返りを行う工夫として、
  仕組みに組み込んでしまうと楽ができます。


  例えばチームの朝会で前日の振り返り結果を共有するとか、
  スクラムであればスプリントレトロスペクティブで行うなど。


  特に1人で行うとモチベーションを維持するのが難しいので、
  同僚やチームを巻き込んでやっていくのは効果的です。
  逆に巻き込むのに労力が必要そうであれば1人でやっていくと良いでしょう。
  
==== 見える化する(グラフ化や色付けなど)
  見積もりと実績はGoogleスプレッドシートやExcelで管理するとわかりやすいですが、  さらに見える化する工夫もしていきましょう。


  例えばバッファ消費率をグラフ化することで、消費率の推移を見たり、総タスク数に対しての割合を見たりすることができます。
  これらによって直近気が抜けていないか、見積もりに対してなにか問題が起きていないかなどを確認していきましょう。


  また、表に対してもバッファ消費率で色分けすることで見える化できます。
  例えばバッファ消費率が30%未満は黄色、バッファ消費率が30～80%未満は緑、バッファ消費率が80%以上は赤とすることで、見積もりが上手く行っているのか問題があるのかを一目瞭然にできます。
  色ではなく顔文字などでもよいでしょう。
  
  GoogleスプレッドシートであればGoogle Apps Script (GAS)を活用することで、特定のしきい値を超えた場合は自動アラートを上げたりすることができるかもしれません。

  自分たちが楽しく、そして楽にできるように工夫していきましょう。
  
==== ストレッチ目標を設定する
  振り返りが定着し高確率でバッファ消費率50%が達成できるようになったら、
  次はバッファ消費率が30%を目指して行きましょう。
  当然ですが、タスクは早く終われば終わることに越したことはないのです。
  そのためなるべく早く終わるように工夫することを考えていきましょう。
  
  ただし、ただ早くすればよいというものではありません。
  具体的にはテストの手を抜けば早くなるかもしれませんが、
  それでは後工程に問題が出てしまいます。
  必要なことを全てやった上で早く終る工夫をする。
  それがストレッチ目標なのです。

== 事例
それでは最後に事例として筆者が2点見積もりを運用した際の事例と、
とあるゲーム開発会社で運用された例を紹介します。


=== 筆者の事例
  既存のタスク管理ツールのようなものがあり、それは実績しか管理していませんでした。
  そこでそのツールのメモ欄に、「最小,最大,実績,メモ(見積もりとズレた理由や気づきなど所感)」
  のようにメモを入れて見積もりと実績を取っていました。

  1年目の後半の半年間続けた結果、
  見積もりの精度は上がり、著者への信頼貯金も増えたのか、
  2年目からはサブリーダーに抜擢していただきました。
  
  また、その時の経験から以下のポイントをお伝えしておきます。
  
==== タスク粒度は細かい方が良い
    タスクの粒度が細かいほうが見積もりしやすいですし、
    正しい結果になりやすくなります。
    そのため、モチベーションが上がり続けやすくなります。

==== 割り込みや突発作業は実績から外す
    実績はあくまで見積もりしたタスクに対して行うもの、です。
    なので、見積もりしていない作業、
    例えば障害対応やユーザー問い合わせ対応などの割り込みや突発作業は実績から除外しましょう。
    これにより見積もりに対して正確に実績を振り返られるようになります。

==== 調査タスクも見積もりしよう
    調査は結果が出るか出ないわからないので見積もりしないケースがありますが、
    筆者は見積もりをしたほうが良いと思います。
    この場合、結果が出るまでをタスクとするのではなく、
    例えば公式ドキュメントを読むとか、
    ここにログを入れて動かしてみるとか、
    詳しそうに聞きに行ってみるとか、
    そういった作業に対して見積もりをしましょう。


    そして見積もりと実績に乖離がある場合は改善していきましょう。


  この半年間で失敗もありましたので、
  それらも併せてお伝えします。
  
==== 振り返りが月に1回は長すぎた。**
    毎日実績は入れていましたが、
    振り返りは月に1回やっていたので、あまり次の見積もりに行かせていなかった気がします。
    毎日アウトプットする形で振り返りすればもっと制度の良い見積もりができたでしょう。

==== 上手く行ったときの知見も貯めればよかった**
    見積もりがズレたときしか理由を考えていなかったので、
    正しい見積もりを再現する知見が溜まりづらかったと思います。
    また、そういった知見が溜まらなかったため、
    チーム内へのフィードバックも積極的に出来ていませんでした。

==== もっと自分に対してもチームに対しても見える化すべきだった**
    2点見積もりをやっていることはチーム内に伝えていましたが、
    グラフや色分けした表を見せることでメリットを伝えたほうが良かったなぁと思います。
    またそういったアウトプットを通して課題や問題点に気づけたりするので、
    チーム内に対しての定期的なアウトプットはするべきだったと思いました。
    
  
=== とあるケーム開発現場であった話
  2点見積もりを採用していたとあるゲーム開発現場で以下のようなやり取りがあったそうです。

  メンバー「〇〇(リーダー)さん、僕、今日はもう帰っても大丈夫なんですね!」

  その開発現場は今までがむしゃらに目の前のことを片付けていた現場でした。
  そのためいつ終わるかわからない開発を続けており、わからないので残業や休出が日常化していました。
  
  しかし、2点見積もりと振り返りを含めた様々なプラクティスを導入した結果、今日頑張らなくても期日までに終わる確度の高いスケジュールが作成できたのです。
  そしてそれがメンバーにも周知されており、メンバーが自信を持って休んでも大丈夫と判断できる状態になったのです。
  
  どんなにリーダーが立派なスケジュールを引いても、その見積もりが正しい自信がメンバーになければこの発言は出ないでしょう。
  
  2点見積もりと振り返りは、メンバーにこの様な自信を与え、チームに確度の高いスケジュールを提供し、プロダクトに安定的なリリースをもたらす一助となります。

== おわりに

いかがでしたでしょうか?
2点見積もりと振り返りについて、少しでも良さそうだな、と思って頂ければ幸いです。

この手法は一人でもできて、いつでも辞められる手法です。費用はかかりません。
そのため、皆さんも2点見積もりを試してみてください。そしてぜひともその経験を発信してください。
それがあなたの、チームの、そして見積もりに困っている誰かの役に立つことを信じています。

最後に筆者が大事にしているジョナサン・ラスマセン氏の言葉を引用して終わります。

  もっとうまくソフトウェアを届けるやり方を探し求め、分かちあい、見出していきましょう。
  でもあんまり深刻に受け止めすぎないで。
  楽しみながらやっていきましょう。

著者:FORTE(Twitter:FORTEgp05)
